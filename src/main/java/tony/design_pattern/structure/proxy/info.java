/**
 * 代理模式为对象提供一个代理，由代理对象控制对原对象的访问，
 * 主要解决直接访问对象无法满足需求的情况，访问对象时通常需要检查安全性、记录日志等等，
 * 这时就可以使用代理模式创建代理对象，调用代理对象的方法，嵌入额外的处理逻辑
 * 使用代理模式扩展功能时不会侵入原代码是最大的优点
 *
 * 代理模式又分动态代理和静态代理
 * 静态代理是在编码阶段定义代理类的行为，需要为原功能类的每个方法编写对应的方法
 * 动态代理则是可以运行时解析功能类的各个方法，动态生成包含各个方法的代理类
 *
 * 在java应用中，如果使用静态代理实现一个通用功能的代理(比如日志)，那么需要为每
 * 个类(或者实现同一个接口的一组类)创建一个代理类并硬编码编写每个类方法(接口方法实现)
 * 而动态代理则没有这个问题，只需要编写一个特定的额外逻辑方法即可
 *
 * java中代理模式的应用尤以AOP为大头，但是AOP不仅仅使用动态代理实现
 */
package tony.design_pattern.structure.proxy;
